#@ load("@ytt:template", "template")

#@ load("@ytt:data", "data")

#@ working_directory = "ansible_collections/plasticrake/duplicacy"

#@ def setup_python():
name: Set up Python 3
uses: actions/setup-python@v2
with:
  python-version: "3.x"
#@ end
---
#@ def checkout_collection():
name: Checkout into collections structure
uses: actions/checkout@v2
with:
  path: #@ working_directory
#@ end
---
#@ def pip_cache():
- name: Get pip cache dir
  id: pip-cache
  run: |
    echo "::set-output name=dir::$(pip3 cache dir)"

- name: pip cache
  uses: actions/cache@v2
  with:
    path: ${{ steps.pip-cache.outputs.dir }}
    key: ${{ runner.os }}-pip
#@ end
---
#@ def paths(role_name):
-  #@ "roles/{}/**".format(role_name)
-  #@ ".github/workflows/ci-role-{}.yml".format(role_name)
#@ end
---
#@ def role_ci(role_name):

#@ role_directory = working_directory + "/roles/" + role_name

name: #@ "CI Role: {}".format(role_name)

"on":
  pull_request:
    paths: #@ paths(role_name)
  push:
    branches:
      -  #@ data.values.git.main_branch
    paths: #@ paths(role_name)

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: #@ working_directory
    steps:
      -  #@ checkout_collection()

      -  #@ setup_python()

      -  #@ template.replace(pip_cache())

      - name: Install test dependencies
        run: pip install yamllint ansible-lint

      - name: Lint code
        #@yaml/text-templated-strings
        run: |
          yamllint roles/(@= role_name @)
          ansible-lint roles/(@= role_name @)

  molecule:
    name: Molecule
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        distro:
          - diodonfrost/ansible-archlinux:latest
          - geerlingguy/docker-centos8-ansible:latest
          - geerlingguy/docker-debian10-ansible:latest
          - geerlingguy/docker-fedora33-ansible:latest
          - diodonfrost/ansible-opensuse:leap
          - geerlingguy/docker-ubuntu2004-ansible:latest
          - freebsd
          - macos
        exclude:
          - os: ubuntu-latest
            distro: freebsd
          - os: ubuntu-latest
            distro: macos
          - os: macos-latest
            distro: diodonfrost/ansible-archlinux:latest
          - os: macos-latest
            distro: geerlingguy/docker-centos8-ansible:latest
          - os: macos-latest
            distro: geerlingguy/docker-debian10-ansible:latest
          - os: macos-latest
            distro: geerlingguy/docker-fedora33-ansible:latest
          - os: macos-latest
            distro: diodonfrost/ansible-opensuse:leap
          - os: macos-latest
            distro: geerlingguy/docker-ubuntu2004-ansible:latest

    defaults:
      run:
        working-directory: #@ working_directory
    steps:
      -  #@ checkout_collection()

      -  #@ setup_python()

      -  #@ template.replace(pip_cache())

      - name: vagrant cache
        uses: actions/cache@v2
        with:
          path: "~/.vagrant.d/boxes"
          key: ${{ runner.os }}-vagrant

      - name: Set molecule scenario (linux)
        if: matrix.distro != 'macos' && matrix.distro != 'freebsd'
        run: echo "SCENARIO=default" >> $GITHUB_ENV

      - name: Set molecule scenario (freebsd)
        if: matrix.distro == 'freebsd'
        run: echo "SCENARIO=vagrant" >> $GITHUB_ENV

      - name: Set molecule scenario (macos)
        if: matrix.distro == 'macos'
        run: echo "SCENARIO=local" >> $GITHUB_ENV

      - name: Install test dependencies (docker)
        if: env.SCENARIO != 'vagrant'
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install "rich<9.5.0" "molecule[ansible,docker,lint]" pytest pytest-testinfra

      - name: Install test dependencies (vagrant)
        if: env.SCENARIO == 'vagrant'
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install "rich<9.5.0" "molecule[ansible,lint]" pytest pytest-testinfra molecule-vagrant python-vagrant

      - name: Install yq (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo snap install yq

      - name: Install yq (macos)
        if: matrix.os == 'macos-latest'
        run: brew install yq

      - name: Generate Molecule role tests
        run: #@ "./test_role.sh {} $MOLECULE_DISTRO".format(role_name)
        env:
          MOLECULE_DISTRO: ${{ matrix.distro }}

      - name: Run Molecule tests
        run: molecule --debug test --scenario-name $SCENARIO
        working-directory: #@ role_directory
        env:
          PY_COLORS: "1"
          ANSIBLE_FORCE_COLOR: "1"
          MOLECULE_DISTRO: ${{ matrix.distro }}
          ROLE_NAME: #@ role_name
#@ end
